Developed and tested with Zig 0.12.1.

original C implementation from https://github.com/djslzx/telescoping-filter/

build with `zig build -Doptimize=ReleaseFast`\
test with `zig-out/bin/*`\
test all with `zig build test`\

## ---c  .   .   .

src/constants.h    | #define REM_SIZE
src/remainder.h    | REM_SIZE -> rem_t
src/macros.h       | macros
src/ext.h          | 
src/arcd.h         | some kind of compression routines
src/bit_util.{c,h} | 
src/set.{c,h}      | hash set (test code)
src/murmur3.{c,h}  | MurmurHash3
src/rsqf.{c,h}     | 
src/utaf.{c,h}     | 
src/taf.{c,h}      | 
src/exaf.{c,h}     | 

## reading list

https://en.wikipedia.org/wiki/MurmurHash

## findings

### RSQF

the name rank select refers to bitrank and bitselect
there's nothing fancy about this filter
it's just the usual QF chopped into blocks of 64
RANK and SELECT are used to find occupied and runend

### utaf

utaf is like RSQF but the nblocks can grow, no it never runs out of space.

![](utaf_h)

the top line-like thing is murmurhash(elt), the hash result

quot: the first filter.k bits of the hash result decides which slot the data is located.
rem: disambiguiation. tells if the elt is in the filter or not (may be false positive). like any QF, only the current run is scanned.
selector: changes what rem is. on false positive, selector++, rem no longer FP. this's called adapt.

to tell false positive and adapt, the inserted elements are stored too.

maybe hash set is faster...

hash set is indeed faster!

hashset_lookup + filter_lookup:

```
❯ hyperfine zig-out/bin/utaf
Benchmark 1: zig-out/bin/utaf
  Time (mean ± σ):     13.043 s ±  0.145 s    [User: 12.999 s, System: 0.007 s]
  Range (min … max):   12.915 s … 13.304 s    10 runs
```

filter_lookup:

```
❯ hyperfine zig-out/bin/utaf
Benchmark 1: zig-out/bin/utaf
  Time (mean ± σ):     11.766 s ±  0.263 s    [User: 11.730 s, System: 0.006 s]
  Range (min … max):   11.214 s … 12.169 s    10 runs
``` 

*to tell false positive and adapt, the inserted elements are stored too.* hashset takes up less space and is faster. fml

### murmurhash? more like bitshifthash

MurmurHash3_x64_128 becomes embarassingly simple when n < 16
we have n = 4
...

### sloppy benchmark

test configuration:

```
  int nslots = 1 << 14;
  double load = 0.95;
```

rsqf:

```
Querying set and filter...
Test results:
FPs: 57955 (0.000372%), RFPs: 52184 (0.033529%)
FNs: 0 (0.000000%)
Arena 0:
system bytes     =    2056192
in use bytes     =    1994976
Total (incl. mmap):
system bytes     =   14508032
in use bytes     =   14446816
max mmap regions =          1
max mmap bytes   =   12451840
Done testing test_mixed_insert_and_query_w_repeats.
```

taf:

```
Querying set and filter...
Test results:
FPs: 38083 (0.000245%), RFPs: 30204 (0.019406%)
FNs: 0 (0.000000%)
TAF stats:
Hash selector counts:
 0: 14664 (89.153696%)
 1: 1556 (9.460117%)
 2: 202 (1.228113%)
 3: 24 (0.145914%)
 4: 2 (0.012160%)
 5: 0 (0.000000%)
Arena 0:
system bytes     =    1081344
in use bytes     =     957280
Total (incl. mmap):
system bytes     =   14921728
in use bytes     =   14797664
max mmap regions =          4
max mmap bytes   =   13840384
Done testing test_mixed_insert_and_query_w_repeats.
```

utaf:

```
Querying set and filter...
Test results:
FPs: 3658 (0.000024%), RFPs: 58 (0.000037%)
FNs: 0 (0.000000%)
FullTAF stats:
Hash selector counts:
 0: 11606 (70.561770%)
 1: 3282 (19.953794%)
 2: 1050 (6.383755%)
 3: 363 (2.206955%)
 4: 103 (0.626216%)
 5: 34 (0.206712%)
 6: 0 (0.000000%)
 7: 1 (0.006080%)
 8: 0 (0.000000%)
 9: 2 (0.012160%)
 10: 0 (0.000000%)
 11: 1 (0.006080%)
 12: 0 (0.000000%)
 13: 0 (0.000000%)
 14: 1 (0.006080%)
 15: 0 (0.000000%)
 16: 0 (0.000000%)
 17: 1 (0.006080%)
 18: 0 (0.000000%)
 19: 0 (0.000000%)
 20: 0 (0.000000%)
 21: 0 (0.000000%)
 22: 0 (0.000000%)
 23: 2 (0.012160%)
 24: 1 (0.006080%)
 25: 0 (0.000000%)
 26: 0 (0.000000%)
Arena 0:
system bytes     =    2822144
in use bytes     =    2577952
Total (incl. mmap):
system bytes     =   30531584
in use bytes     =   30287392
max mmap regions =          7
max mmap bytes   =   27709440
Done testing test_mixed_insert_and_query_w_repeats.
```

benchmark:

```
❯ zig build -Doptimize=ReleaseFast -Dtimeit
❯ for f in taf utaf rsqf
      hyperfine zig-out/bin/$f
  end
Benchmark 1: zig-out/bin/taf
  Time (mean ± σ):     13.641 s ±  0.463 s    [User: 13.600 s, System: 0.007 s]
  Range (min … max):   13.222 s … 14.528 s    10 runs
 
Benchmark 1: zig-out/bin/utaf
  Time (mean ± σ):      7.220 s ±  0.046 s    [User: 7.204 s, System: 0.002 s]
  Range (min … max):    7.145 s …  7.273 s    10 runs
 
Benchmark 1: zig-out/bin/rsqf
  Time (mean ± σ):      7.195 s ±  0.043 s    [User: 7.179 s, System: 0.002 s]
  Range (min … max):    7.138 s …  7.264 s    10 runs

```
